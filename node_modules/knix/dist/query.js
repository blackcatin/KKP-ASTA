"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Query = void 0;
class Query {
    constructor(data) {
        Object.assign(this, data);
    }
    executeNewTransaction(cb) {
        return new Promise((resolve, reject) => {
            this.sqlite.transaction((tx) => __awaiter(this, void 0, void 0, function* () {
                tx.executeSql(this.sql, this.params, (_, resultSet) => {
                    resolve(cb(resultSet));
                }, (err) => reject(new Error(err.message)));
            }));
        });
    }
    executeExistingTransaction(cb) {
        if (!this.tx) {
            throw new Error("no existing transaction");
        }
        return new Promise((resolve, reject) => this.tx.executeSql(this.sql, this.params, (_, resultSet) => resolve(cb(resultSet)), (err) => reject(new Error(err.message))));
    }
    execute(cb) {
        return this.tx
            ? this.executeExistingTransaction(cb)
            : this.executeNewTransaction(cb);
    }
    insert() {
        return this.execute((resultSet) => resultSet.insertId);
    }
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.execute((resultSet) => resultSet.rowsAffected);
        });
    }
    one() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.execute((resultSet) => resultSet.rows.item(0));
        });
    }
    all() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.execute((resultSet) => {
                const result = [];
                for (let i = 0; i < resultSet.rows.length; ++i) {
                    result.push(resultSet.rows.item(i));
                }
                return result;
            });
        });
    }
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.one();
        });
    }
}
exports.Query = Query;
