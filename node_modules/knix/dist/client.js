"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = exports.TransactedClient = void 0;
const query_1 = require("./query");
class TransactedClient {
    constructor(sqlite, tx) {
        this.sqlite = sqlite;
        this.tx = tx;
    }
    query(sql, params = []) {
        return new query_1.Query({
            sqlite: this.sqlite,
            tx: this.tx,
            sql,
            params,
        });
    }
}
exports.TransactedClient = TransactedClient;
class Client {
    constructor(sqlite) {
        this.sqlite = sqlite;
    }
    query(sql, params = []) {
        return new query_1.Query({
            sqlite: this.sqlite,
            sql,
            params,
        });
    }
    transaction(cb) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sqlite.transaction((tx) => __awaiter(this, void 0, void 0, function* () {
                yield cb(new TransactedClient(this.sqlite, tx));
            }));
        });
    }
}
exports.Client = Client;
